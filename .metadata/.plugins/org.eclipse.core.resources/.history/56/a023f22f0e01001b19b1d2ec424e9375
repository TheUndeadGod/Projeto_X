package com.grgames.main;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable, KeyListener {

	private static final long serialVersionUID = -5309707430436861883L;

	private final int WIDTH = 200;
	private final int HEIGHT = 140;
	private final int SCALE = 3;
	
	private JFrame jframe;
	private Thread thread;
	
	private boolean isRunning;
	
	public Game() {
		this.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		initFrame();
	}
	
	public static void main(String[] args) {
		Game game = new Game();
		game.start();
	}
	
	// Inicia o JFrame.
	public void initFrame() {
		jframe = new JFrame("Projeto X");
		jframe.add(this);
		jframe.pack();
		jframe.setVisible(true);
		jframe.setResizable(false);
		jframe.setLocationRelativeTo(null);
		jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	public synchronized void start() {
		thread = new Thread(this);
		isRunning = true;
		thread.start();
	}
	
	public synchronized void stop() {
		isRunning = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	// Método responsável por TODA logica do jogo.
	public void tick() {
		
	}
	
	// Método responsável por renderizar todo o jogo.
	public void render() {
		
	}
	
	// Método responsável por deixar o game em loop, deve criar um FPS para deixar ele fluido.
	public void run() {
		
		requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0; // Controlador do FPS.
		double ns = 1000000000 / amountOfTicks;
		while(isRunning) {
			
			tick();
			render();
		}
		
		stop();
	}
	
	/*
	 * -- Inico dos métodos KeyListener.
	 */
	
	@Override
	public void keyPressed(KeyEvent arg0) {
		
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		
	}
	
	/*
	 * -- Final dos métodos KeyListener.
	 */

}
